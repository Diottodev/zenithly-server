name: Deploy to EC2

on:
  workflow_dispatch:
    inputs:
      environment:
        description: "Environment to deploy"
        required: true
        default: "production"
        type: choice
        options:
          - production
          - staging
      restart_only:
        description: "Deploy usando Docker Compose"
        required: false
        default: false
        type: boolean

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment }}

    steps:
      - name: Deploy to EC2
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          port: ${{ secrets.EC2_PORT || 22 }}
          debug: true
          timeout: 60
          command_timeout: 60
          script: |
            echo "🚀 Starting deployment to ${{ github.event.inputs.environment }}..."

            # Set application path
            APP_PATH="zenithly-server"
            if [ ! -d "$APP_PATH" ]; then
              APP_PATH="/var/www/zenithly-server"
            fi

            if [ ! -d "$APP_PATH/.git" ]; then
              git clone git@github.com:Diottodev/zenithly-server.git $APP_PATH
            fi

            cd $APP_PATH

            if [ "${{ github.event.inputs.restart_only }}" == "true" ]; then
              echo "🔄 Reiniciando containers Docker..."
              docker compose restart
            else
              echo "📦 Pulling latest changes..."
              git pull origin master
              
              echo "📥 Installing dependencies..."
              yarn install --frozen-lockfile
              
              echo "🗄️ Running database migrations..."
              yarn db:migrate
              
              echo "🔄 Reiniciando containers Docker..."
              docker compose restart
            fi

            echo "✅ Deployment completed!"
            echo "📊 Status dos containers Docker:"
            docker compose ps

            echo "🩺 Health check dos containers Docker:"
            docker compose ps | grep -E 'Up|healthy' || (echo '❌ Um ou mais containers não estão rodando corretamente!' && exit 1)

            echo "📝 Logs da API (últimas 50 linhas):"
            docker compose logs --tail=50 api
